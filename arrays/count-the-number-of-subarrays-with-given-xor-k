# Count the number of subarrays with given xor K

# bruteforce
```py
nums = [4, 2, 2, 6, 4]
k = 6

n = len(nums)

count = 0

for i in range(n):
    for j in range(i,n):
        xor = 0
        for l in range(i,j+1):
            xor = xor ^ nums[l]
        if xor == k:
            count += 1

print(count)
```
TC - O(N^3)
SC - O(1)

# better
```py
nums = [4, 2, 2, 6, 4]
k = 6

n = len(nums)

count = 0

for i in range(n):
    xor = 0
    for j in range(i,n):
        xor = xor ^ nums[j]
        if xor == k:
            count += 1

print(count)
```
TC - O(N^2)
SC - O(1)

# optimized
```py
nums = [4, 2, 2, 6, 4]
n = len(nums)
k = 6

count = 0
xr = 0
hash_map = {}

hash_map[0] = 1

for i in range(n):
    xr = xr ^ nums[i]

    x = xr ^ k

    if x in hash_map:
        count = count + hash_map[x]

    if xr in hash_map:
        hash_map[xr] += 1
    else:
        hash_map[xr] = 1

print(count)
```
TC - O(N*logN)
SC - O(N)
