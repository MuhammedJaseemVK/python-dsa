# Sort an array of 0s, 1s and 2s

# Bruteforce
```py
nums = [2,6,5,8,11]
nums.sort()
print(result)
```
TC - O(NlogN)
SC - O(1)

# Better - keeping count
```py
nums = [2,0,2,1,1,0]
n = len(nums)

count_of_zero = 0
count_of_one = 0
count_of_two = 0

for i in range(n):
    if nums[i] == 0:
        count_of_zero += 1
    elif nums[i] == 1:
        count_of_one += 1
    else:
        count_of_two+=1

index = 0
for i in range(count_of_zero):
    nums[index] = 0
    index += 1
for i in range(count_of_one):
    nums[index] = 1
    index += 1
for i in range(count_of_two):
    nums[index] = 2
    index += 1

print(nums)
```
TC - O(N) + O(N) #one for storing count. another for replacement
SC - O(1)

# Optimized - dutch national flag algorithm
```py
array = [2,0,2,1,1,0]
n = len(array)

def swap(num1,num2):
    temp = array[num1]
    array[num1] = array[num2]
    array[num2] = temp

# Since we consider the entire array as unsorted.
low = 0
mid = 0
high = n - 1

while(mid<=high):
    if array[mid] == 0:
        swap(array,low,mid)
        low+=1
        mid+=1
    elif array[mid] == 1:
        mid+=1
    else:
        swap(array,mid,high)
        high-=1
print(array)
```
TC - O(N)
SC - O(1)
