# 4 Sum | Find Quads that add up to a target value

# bruteforce
```py
nums = [1,0,-1,0,-2,2]
target = 0

n = len(nums)
unique_quadruplets = set()


for i in range(n-3):
    for j in range(i+1,n-2):
        for k in range(j+1,n-1):
            for l in range(k+1,n):
                sum = nums[i]+nums[j]+nums[k]+nums[l]
                if sum == target:
                    quadruplet = [nums[i],nums[j],nums[k],nums[l]]
                    quadruplet.sort()
                    unique_quadruplets.add(tuple(quadruplet))
for i in unique_quadruplets:
    print(i)
```
TC - O(N^4)
SC - O(2 * no. of quadruplets)

# better (sets)
```py
nums = [1,0,-1,0,-2,2]
target = 0

n = len(nums)
unique_quadruples = set()

for i in range(n):
    for j in range(i+1,n):
        st = set()
        for k in range(j+1,n):
            fourth_number = -(nums[i] + nums[j] + nums[k] - target)
            
            if fourth_number in st:
                quadruple = [nums[i],nums[j],nums[k],fourth_number]
                quadruple.sort()
                unique_quadruples.add(tuple(quadruple))

            st.add(nums[k])

for i in unique_quadruples:
    print(i)
```
TC - O(N^3 * log(M)) - where M is the no.of quadpruples
SC - O(2 * no.of quadruples)

# optimized
```py
nums = [1,0,-1,0,-2,2]
target = 0

n = len(nums)
nums.sort()

unique_quadruples = []

for i in range(n):
    # skipping duplicates
    if i != 0 and nums[i] == nums[i-1]:
        continue
    
    for j in range(i+1,n):
        if j!=0 and nums[j] == nums[j-1]:
            continue
        
        k = j+1
        l = n-1
        while k<l:
            total_sum = nums[i] + nums[j] + nums[k] + nums[l]
            if total_sum < target:
                k += 1
            elif total_sum > target:
                l -= 1
            else:
                quadruple = [nums[i],nums[j],nums[k],nums[l]]
                unique_quadruples.append(quadruple)
                k += 1
                l -= 1
                # skipping duplicates
                while k<l and nums[k] == nums[k-1]:
                    k += 1
                while k<l and nums[l] == nums[l+1]:
                    l -= 1

for i in unique_quadruples:
    print(i)
```
TC - O(N^3) - where M is the no.of quadpruples
SC - O(1)

# optimized
```py
nums = [4, 2, 2, 6, 4]
n = len(nums)
k = 6

count = 0
xr = 0
hash_map = {}

hash_map[0] = 1

for i in range(n):
    xr = xr ^ nums[i]

    x = xr ^ k

    if x in hash_map:
        count = count + hash_map[x]

    if xr in hash_map:
        hash_map[xr] += 1
    else:
        hash_map[xr] = 1

print(count)
```
